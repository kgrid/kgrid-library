package edu.umich.lhs.library.FedoraAccessLayer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.complexible.pinto.RDFMapper;
import edu.umich.lhs.library.fedoraGateway.ChildType;
import edu.umich.lhs.library.fusekiGateway.NamespaceConstants;
import edu.umich.lhs.library.knowledgeObject.Metadata;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.openrdf.model.IRI;
import org.openrdf.model.Model;
import org.openrdf.model.impl.SimpleValueFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import edu.umich.lhs.library.exception.LibraryException;
import edu.umich.lhs.library.fedoraGateway.FCRepoService;

/**
 * Created by nggittle on 4/19/17.
 */
@RunWith(SpringRunner.class)
@SpringBootTest
public class FCRepoServiceIT {

  private static final String TEST_ID = "test_id_for_testing" + UUID.randomUUID();

  @Autowired
  private FCRepoService fcs;

  @Rule
  public ExpectedException expectedEx = ExpectedException.none();

  @Test
  public void testCheckObjectWhenObjectDoesntExist() throws Exception {
    assertFalse(fcs.checkIfObjectExists(new URI(fcs.getBaseURI() + "null")));
  }

  @Test
  public void createTransactionID() throws Exception {
    assertNotNull(fcs.createTransaction());
  }

  @Test
  public void commitCorrectTransaction() throws Exception {
    fcs.commitTransaction(fcs.createTransaction());
  }

  @Test
  public void commitIncorrectTransaction() throws Exception {
    expectedEx.expect(LibraryException.class);
    fcs.commitTransaction(null);
  }

  @Test
  public void rollbackTransaction() throws Exception {
    fcs.rollbackTransaction(fcs.createTransaction());
  }

  @Test
  public void rollbackIncorrectTransaction() throws Exception {
    expectedEx.expect(LibraryException.class);
    fcs.rollbackTransaction(null);
  }

  @Test
  public void testPing() throws Exception {
    assertTrue(fcs.ping());
  }

  @Test
  public void createFetchAndDeleteObject() throws Exception {

    URI objectURI = new URI(fcs.getBaseURI() + TEST_ID);
    Model model = buildTestModel();

    // Create
    fcs.putRDFData(model, objectURI);
    assertTrue(fcs.checkIfObjectExists(objectURI));

    // Fetch
    assertNotNull(fcs.getRDFData(objectURI));

    // Delete
    deleteTestModel(objectURI);
  }

  @Test
  public void createAndDeleteContainer() throws Exception {

    URI containerURI = fcs.createContainerWithAutoGeneratedName(fcs.getBaseURI());
    assertNotNull(containerURI);
    assertTrue(fcs.checkIfObjectExists(containerURI));
    fcs.deleteResource(containerURI);
    assertFalse(fcs.checkIfObjectExists(containerURI));
  }

  @Test
  public void createAndGetModel() throws Exception {
    URI objectURI = new URI(fcs.getBaseURI() + TEST_ID);
    Model model = buildTestModel();

    // Create
    fcs.putRDFData(model, objectURI);
    assertTrue(fcs.checkIfObjectExists(objectURI));

    // Get
    org.apache.jena.rdf.model.Model jenaModel = fcs.getRdfJson(objectURI);
    System.out.println(jenaModel.toString());
    assertTrue(jenaModel.toString().contains("[" + fcs.getBaseURI() + TEST_ID + ", http://purl.org/dc/elements/1.1/title, \"test\"]"));

    // Delete
    deleteTestModel(objectURI);
  }

  @Test
  public void getStringObjectContent() throws Exception {
    String payload = "test binary";
    URI objectURI = new URI(fcs.getBaseURI() + TEST_ID);
    fcs.putBinary(payload, objectURI, ChildType.PAYLOAD.getChildType());
    String content = fcs.getStringObjectContent(new URI(objectURI + "/" + ChildType.PAYLOAD.getChildType()));
    assertEquals(payload, content);
  }

  @Test
  public void getChildrenURIs() throws Exception {
    URI objectURI = new URI(fcs.getBaseURI() + TEST_ID);
    String payload = "test binary";

    // Create
    fcs.putBinary(payload, objectURI, ChildType.PAYLOAD.getChildType());

    List<URI> children = fcs.getChildrenURIs(objectURI);

    List<URI> expectedChildren = new ArrayList<>();
    expectedChildren.add(new URI(objectURI + "/" + ChildType.PAYLOAD.getChildType()));

    assertEquals(expectedChildren, children);

    deleteTestModel(new URI(objectURI + "/" + ChildType.PAYLOAD.getChildType()));

    deleteTestModel(objectURI);
  }

  @Test
  public void createCodeStringPayload() throws Exception {
    URI objectURI = new URI(fcs.getBaseURI() + TEST_ID);
    String payload = "test binary";

    fcs.putStringBinary(payload, new URI(objectURI + "/" + ChildType.PAYLOAD.getChildType()));

    String content = fcs.getStringObjectContent(new URI(objectURI + "/" + ChildType.PAYLOAD.getChildType()));
    assertEquals(payload, content);
    deleteTestModel(new URI(objectURI + "/" + ChildType.PAYLOAD.getChildType()));
    deleteTestModel(objectURI);
  }

  @Test
  public void createContainer() throws Exception {
    URI objectURI = new URI(fcs.getBaseURI() + TEST_ID);
    String containerName = "test";
    fcs.createContainer(objectURI, containerName);

    fcs.getChildrenURIs(objectURI);
    List<URI> children = fcs.getChildrenURIs(objectURI);

    List<URI> expectedChildren = new ArrayList<>();
    expectedChildren.add(new URI(objectURI + "/test"));
    assertEquals(expectedChildren, children);

    deleteTestModel(new URI(objectURI + "/" + containerName));

    deleteTestModel(objectURI);
  }

  private Model buildTestModel() throws URISyntaxException {
    Metadata data = new Metadata();
    data.setTitle("test");
    data.setVersion("1.0");
    data.setArkId("test-fk4test");
    data.setPublished(false);
    data.setCitations(null);
    data.setLicense(null);

    IRI iri = SimpleValueFactory.getInstance().createIRI(fcs.getBaseURI() + TEST_ID);
    data.id(iri);

    return RDFMapper.builder()
        .namespace(NamespaceConstants.OT_NAMESPACE_PREFIX, NamespaceConstants.OT_NAMESPACE_URL)
        .namespace(NamespaceConstants.FEDORA_NAMESPACE_PREFIX, NamespaceConstants.FEDORA_NAMESPACE_URL)
        .namespace(NamespaceConstants.PROV_NAMESPACE_PREFIX, NamespaceConstants.PROV_NAMESPACE_URL)
        .build().writeValue(data);
  }

  private void deleteTestModel(URI objectURI) throws Exception {
    fcs.deleteResource(objectURI);
    assertFalse(fcs.checkIfObjectExists(objectURI));
    fcs.deleteResource(new URI(objectURI + "/fcr:tombstone")); //Remove tombstone so we can repeat test
  }
}